#summary Documentation for py-prop-logic.
#labels Featured

= Documentation =

py-prop-logic is an implementation of the back-tracking algorithm for propositional logic described in Russel and Norvig's "Artificial Intelligence a Modern Approach".
It implements negation as failure through the special keyword "Not(...)".

NOTE: There is very little error handling, so use it with care.

== Installation ==

There is nothing to install. Download the source file from the repository and put it in your project.
You can then import the classes from the "prop_logic" module.


== Usage ==
This project implements a knowledge base in the class FolKB. This class has three methods:
- Tell
- Ask
- Retract
This project also implements help classes and a back tracking mechanism.

=== Some hints ===
General usage is shown in the source file through several examples.

In general, you first need to tell the knowledge base some rules and some facts.
Rules are indicated by an implication arrow, like
"Parent(x,y) -> Offspring(y,x)"
"Parent(x,y) & Female(x) -> Mother(x,y)"
"Parent(y,x) & Parent(z,y) -> Grandparent(z,x)"
"Not(Male(x)) -> Female(x)"

Facts do not have implication arrows, like
"Parent(Pam,Bob)"
"Male(Tom)"

There are three types of objects in this implementation (as of yet).
- Variables start with a lower case letter. In the examples above, "x","y" and "z" are used.
- Constants start with an upper case letter. In the examples above, "Pam", "Bob" and "Tom" are used.
- Predicates start with an upper case letter and have arguments. In the examples above, "Parent(x,y)", "Female(x)" and "Not(Male(x))" are used.

"Not" is a special keyword which indicates that the argument predicate should Not be fulfilled in the KB for the matching to succeed.